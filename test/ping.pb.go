// Code generated by protoc-gen-go. DO NOT EDIT.
// source: testdata/protobuf/ping/ping.proto

package test // import "github.com/nokamoto/grpc-proxy/test"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Ping struct {
	Ts                   int64    `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_ping_85df9fe8b07f3744, []int{0}
}
func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (dst *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(dst, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

func (m *Ping) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

type Pong struct {
	Source               []*Ping  `protobuf:"bytes,1,rep,name=source,proto3" json:"source,omitempty"`
	Ts                   int64    `protobuf:"varint,2,opt,name=ts,proto3" json:"ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_ping_85df9fe8b07f3744, []int{1}
}
func (m *Pong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pong.Unmarshal(m, b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
}
func (dst *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(dst, src)
}
func (m *Pong) XXX_Size() int {
	return xxx_messageInfo_Pong.Size(m)
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

func (m *Pong) GetSource() []*Ping {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Pong) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func init() {
	proto.RegisterType((*Ping)(nil), "ping.Ping")
	proto.RegisterType((*Pong)(nil), "ping.Pong")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PingServiceClient is the client API for PingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PingServiceClient interface {
	Send(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	SendStreamC(ctx context.Context, opts ...grpc.CallOption) (PingService_SendStreamCClient, error)
	SendStreamS(ctx context.Context, in *Ping, opts ...grpc.CallOption) (PingService_SendStreamSClient, error)
	SendStreamB(ctx context.Context, opts ...grpc.CallOption) (PingService_SendStreamBClient, error)
}

type pingServiceClient struct {
	cc *grpc.ClientConn
}

func NewPingServiceClient(cc *grpc.ClientConn) PingServiceClient {
	return &pingServiceClient{cc}
}

func (c *pingServiceClient) Send(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/ping.PingService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingServiceClient) SendStreamC(ctx context.Context, opts ...grpc.CallOption) (PingService_SendStreamCClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PingService_serviceDesc.Streams[0], "/ping.PingService/SendStreamC", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingServiceSendStreamCClient{stream}
	return x, nil
}

type PingService_SendStreamCClient interface {
	Send(*Ping) error
	CloseAndRecv() (*Pong, error)
	grpc.ClientStream
}

type pingServiceSendStreamCClient struct {
	grpc.ClientStream
}

func (x *pingServiceSendStreamCClient) Send(m *Ping) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pingServiceSendStreamCClient) CloseAndRecv() (*Pong, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Pong)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pingServiceClient) SendStreamS(ctx context.Context, in *Ping, opts ...grpc.CallOption) (PingService_SendStreamSClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PingService_serviceDesc.Streams[1], "/ping.PingService/SendStreamS", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingServiceSendStreamSClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PingService_SendStreamSClient interface {
	Recv() (*Pong, error)
	grpc.ClientStream
}

type pingServiceSendStreamSClient struct {
	grpc.ClientStream
}

func (x *pingServiceSendStreamSClient) Recv() (*Pong, error) {
	m := new(Pong)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pingServiceClient) SendStreamB(ctx context.Context, opts ...grpc.CallOption) (PingService_SendStreamBClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PingService_serviceDesc.Streams[2], "/ping.PingService/SendStreamB", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingServiceSendStreamBClient{stream}
	return x, nil
}

type PingService_SendStreamBClient interface {
	Send(*Ping) error
	Recv() (*Pong, error)
	grpc.ClientStream
}

type pingServiceSendStreamBClient struct {
	grpc.ClientStream
}

func (x *pingServiceSendStreamBClient) Send(m *Ping) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pingServiceSendStreamBClient) Recv() (*Pong, error) {
	m := new(Pong)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingServiceServer is the server API for PingService service.
type PingServiceServer interface {
	Send(context.Context, *Ping) (*Pong, error)
	SendStreamC(PingService_SendStreamCServer) error
	SendStreamS(*Ping, PingService_SendStreamSServer) error
	SendStreamB(PingService_SendStreamBServer) error
}

func RegisterPingServiceServer(s *grpc.Server, srv PingServiceServer) {
	s.RegisterService(&_PingService_serviceDesc, srv)
}

func _PingService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ping.PingService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServiceServer).Send(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingService_SendStreamC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingServiceServer).SendStreamC(&pingServiceSendStreamCServer{stream})
}

type PingService_SendStreamCServer interface {
	SendAndClose(*Pong) error
	Recv() (*Ping, error)
	grpc.ServerStream
}

type pingServiceSendStreamCServer struct {
	grpc.ServerStream
}

func (x *pingServiceSendStreamCServer) SendAndClose(m *Pong) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pingServiceSendStreamCServer) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PingService_SendStreamS_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Ping)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingServiceServer).SendStreamS(m, &pingServiceSendStreamSServer{stream})
}

type PingService_SendStreamSServer interface {
	Send(*Pong) error
	grpc.ServerStream
}

type pingServiceSendStreamSServer struct {
	grpc.ServerStream
}

func (x *pingServiceSendStreamSServer) Send(m *Pong) error {
	return x.ServerStream.SendMsg(m)
}

func _PingService_SendStreamB_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingServiceServer).SendStreamB(&pingServiceSendStreamBServer{stream})
}

type PingService_SendStreamBServer interface {
	Send(*Pong) error
	Recv() (*Ping, error)
	grpc.ServerStream
}

type pingServiceSendStreamBServer struct {
	grpc.ServerStream
}

func (x *pingServiceSendStreamBServer) Send(m *Pong) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pingServiceSendStreamBServer) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ping.PingService",
	HandlerType: (*PingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _PingService_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendStreamC",
			Handler:       _PingService_SendStreamC_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendStreamS",
			Handler:       _PingService_SendStreamS_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendStreamB",
			Handler:       _PingService_SendStreamB_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "testdata/protobuf/ping/ping.proto",
}

func init() {
	proto.RegisterFile("testdata/protobuf/ping/ping.proto", fileDescriptor_ping_85df9fe8b07f3744)
}

var fileDescriptor_ping_85df9fe8b07f3744 = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2c, 0x49, 0x2d, 0x2e,
	0x49, 0x49, 0x2c, 0x49, 0xd4, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x2f, 0xc8,
	0xcc, 0x4b, 0x07, 0x13, 0x7a, 0x60, 0x21, 0x21, 0x16, 0x10, 0x5b, 0x49, 0x8c, 0x8b, 0x25, 0x20,
	0x33, 0x2f, 0x5d, 0x88, 0x8f, 0x8b, 0xa9, 0xa4, 0x58, 0x82, 0x51, 0x81, 0x51, 0x83, 0x39, 0x88,
	0xa9, 0xa4, 0x58, 0xc9, 0x8a, 0x8b, 0x25, 0x20, 0x3f, 0x2f, 0x5d, 0x48, 0x89, 0x8b, 0xad, 0x38,
	0xbf, 0xb4, 0x28, 0x39, 0x55, 0x82, 0x51, 0x81, 0x59, 0x83, 0xdb, 0x88, 0x4b, 0x0f, 0x6c, 0x04,
	0x48, 0x4f, 0x10, 0x54, 0x06, 0xaa, 0x97, 0x09, 0xa6, 0xd7, 0x68, 0x15, 0x23, 0x17, 0x37, 0x48,
	0x41, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa, 0x90, 0x1c, 0x17, 0x4b, 0x70, 0x6a, 0x5e, 0x8a,
	0x10, 0x92, 0x5e, 0x29, 0x18, 0x1b, 0x64, 0x87, 0x3a, 0x17, 0x37, 0x48, 0x3e, 0xb8, 0xa4, 0x28,
	0x35, 0x31, 0xd7, 0x19, 0x97, 0x32, 0x0d, 0x46, 0x54, 0x85, 0xc1, 0xb8, 0x14, 0x1a, 0x30, 0x0a,
	0x69, 0x22, 0x2b, 0x74, 0xc2, 0x6d, 0xa2, 0x01, 0xa3, 0x93, 0x6a, 0x94, 0x72, 0x7a, 0x66, 0x49,
	0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x5e, 0x7e, 0x76, 0x62, 0x6e, 0x7e, 0x49, 0xbe,
	0x7e, 0x7a, 0x51, 0x41, 0xb2, 0x6e, 0x41, 0x51, 0x7e, 0x45, 0xa5, 0x3e, 0x28, 0x28, 0x93, 0xd8,
	0xc0, 0x81, 0x66, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xda, 0x52, 0x1e, 0x74, 0x59, 0x01, 0x00,
	0x00,
}
